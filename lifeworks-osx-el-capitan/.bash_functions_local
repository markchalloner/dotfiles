func_awsassumerole() {
  local token="${1}"
  if [ -z "${AWS_MFA_DEVICE}" ]
  then
    echo "Error: MFA device must be set in \$AWS_MFA_DEVICE"
    return 1
  fi
  if [ -z "${AWS_ROLE}" ]
  then
    echo "Error: Role must be set in \$AWS_ROLE"
    return 1
  fi
  if [ -z "${token}" ]
  then
    echo "Error: MFA token must be provided"
    return 1
  fi
  local output
  output="$(aws sts assume-role --role-arn "${AWS_ROLE}" --role-session-name "test_readonly" --serial-number "${AWS_MFA_DEVICE}" --token-code "${token}")"
  local result=${?}
  AWS_ACCESS_KEY_ID="$(echo "${output}" | sed -n -e '/AccessKeyId/ s/.*".*": "\(.*\)".*/\1/p')"
  AWS_SECRET_ACCESS_KEY="$(echo "${output}" | sed -n -e '/SecretAccessKey/ s/.*".*": "\(.*\)".*/\1/p')"
  AWS_SESSION_TOKEN="$(echo "${output}" | sed -n -e '/SessionToken/ s/.*".*": "\(.*\)".*/\1/p')"
  return ${result}
}

func_awsips() {
  local token="${1}"
  local cache_dir="${HOME}/.aws"
  local cache_file="${cache_dir}/ips"
  if [ -n "${token}" ]
  then
    mkdir -p "${cache_dir}"
    (
      func_awsassumerole "${1}" || return 1
      export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      export AWS_SECRET_ACCESS_KEY
      export AWS_SESSION_TOKEN
      local ips
      ips=$(aws ec2 describe-instances | jq -r '.Reservations[].Instances[] | "\(.PrivateIpAddress)\ttest-\(.Tags[] | select(.Key == "Name") | .Value)"' | sort -k 2,2)
      if [ $? -eq 0 ]
      then
	echo -e "# Generated at $(date "+%Y-%m-%d %H:%M:%S")\n${ips}" > "${cache_file}"
        echo "${ips}"
	return 0
      else
        return 1
      fi
    )
  else
    if [ -f "${cache_file}" ]
    then
      cat "${cache_file}"
    else
      echo "Error: IPs have not been cached, rerun with an MFA token"
      return 1
    fi
  fi
}

func_awsip() {
  local search="${1}"
  local index="${2:-1}"
  local token="${3}"
  if [ -z "${search}" ]
  then
    echo "Error: Must provide a search term"
    return 1
  fi
  if [ -z "${token}" ] && [ ${#index} -eq 6 ]
  then
    token="${index}"
    index=1
  fi
  local output
  output=$(func_awsips "${token}")
  local result="${?}"
  if [ ${result} -eq 0 ]
  then
    local ip=$(echo "${output}" | grep "${search}" | head -n "${index}" | tail -n 1 | cut -f 1)
    if [ -n "${ip}" ]
    then
      echo "${ip}"
      return 0
    else
      echo "Error: IP for ${search} not found"
      return 1
    fi
  else
    echo "${output}"
  fi
  return ${result}
}

func_awsssh() {
  if [ -z "${AWS_SSH_USER}" ]
  then
    echo "Error: User must be defined in \$AWS_SSH_USER"
    return 1
  fi
  local output
  output=$(func_awsip "${1}" "${2}" "${3}")
  local result="${?}"
  if [ ${result} -eq 0 ]
  then
    ssh "${AWS_SSH_USER}"@"${output}"
    return 0
  else
    echo "${output}"
    return ${result}
  fi
}

func_gcliticket2pull() {
  RETVAL=
  local url_base="https://github.com/workivate"
  local prs="${HOME}/.personal/prs.txt"
  local nicks=("api" "arch" "backend" "sso" "content")
  local ticket="${1}"
  local ticket_num=""
  local nick=""
  local proj=""
  local pr=""
  local url=""
  if [ -z "${ticket}" ]
  then
    return
  fi
  if $(echo "${ticket}" | grep -q "^[[:digit:]]\+$")
  then
    ticket_num="${ticket}"
    ticket="RA-${ticket}"
  else
    ticket_num="${ticket/RA/}"
    ticket_num="${ticket_num/-/}"
  fi
  if [ -f "${prs}" ]
  then
    url="$(grep "^${ticket}=" "${prs}" | head -n 1 | sed 's/^.*=//g')"
    # Check if this is a pull number
    if [ -z "${url}" ] && [ "${1}" == "${ticket_num}" ]
    then
      url="$(grep "pull/${ticket_num}$" "${HOME}/.personal/prs.txt" | head -n 1 | sed 's/^.*=//g')"
    fi
  fi
  # Requires nodegh: sudo npm install gh -g
  if [ -z "${url}" ] && $(type gh > /dev/null 2>&1)
  then
    for nick in ${nicks[@]}
    do
      proj="$(func_projnick2full "${nick}")"
      if [ -n "${proj}" ]
      then
        echo -n "Searching ${proj} for ticket ${ticket}... "
        pr="$((gh pr --list --user "workivate" --repo "${proj}" --state open && gh pr --list --user "workivate" --repo "${proj}" --state closed) | grep '[Rr][Aa][- ]'${ticket_num} | sed 's/^#\([0-9]*\) .*$/\1/g')"
        if [ -n "${pr}" ]
        then
          echo "found!"
          url="${url_base}/${proj}/pull/${pr}"
          func_prcache "${ticket}" "${url}"
          break
        else
          echo "not found"
        fi
      fi
    done
  fi
  RETVAL="${url}"
}

func_gx() {
  local path="${1}"
  local url_base="https://github.com"
  local url_company="${url_base}/workivate"
  local url=
  local sub=
  local pr=
  local ticket=
  if $(git status > /dev/null 2>&1)
  then
    func_remind "hub browse"
  fi
  case "${path}" in
    "f"|"feed")
      url="${url_base}"
      ;;
    "p"|"pulls")
      author="$(func_dev2gh "${2}")"
      state="$(echo "${3}" | tr '[:upper:]' '[:lower:]')"
      if [ -z "${author}" ]
      then
         author="markchalloner"
         state="${2}"
      fi
      case "${state}" in
        "o"|"open")
          state="+is%3Aopen"
          ;;
        "c"|"closed")
          state="+is%3Aclosed"
          ;;
        *)
          state=""
          ;;
      esac
      url="${url_base}/pulls?q=is%3Apr+author%3A${author}${state}"
      ;;
    "pr"|"pull-request")
      pr="${2}"
      func_gcliticket2pull "${pr}"
      url="${RETVAL}"
      ;;
    [0-9]*)
      url="${url_company}/wa-api/pull/${path}"
      ;;
    "")
      url="${url_company}"
      ;;
    *)
      path="$(func_projnick2full "${path}")"
      shift 
      sub="${@}"
      sub="${sub// //}"
      sub="${sub//branch/tree}"
      url="${url_company}/${path}/${sub}"
      ;;
  esac
  if [ -n "${url}" ]
  then
    open "${url}"
  fi
}

func_hstsclean() {
  local search="${1:-lifeworks}"
  sed -i.bak '/'${search}'/d' ~/Library/Application\ Support/Firefox/Profiles/*.default/SiteSecurityServiceState.txt
}


func_jr() {
  local ticket="${1}"
  local branch=
  local board=224
  local board_planning=221
  local url_base="https://workivate.atlassian.net"
  local url=
  if [ -z "${ticket}" ] && $(git status > /dev/null 2>&1)
  then
    branch="$(git rev-parse --abbrev-ref HEAD)"
    if $(echo "${branch}" | grep -q '^\w\+-\d\+$')
    then
      ticket="${branch}"
    fi
  fi
  case "${ticket}" in
    a|agile)
      board="${2:-${board}}"
      url="${url_base}/secure/RapidBoard.jspa?rapidView=${board}"
      ;;
    b|backlog)
      board="${2:-${board}}"
      url="${url_base}/secure/RapidBoard.jspa?rapidView=${board}&view=planning.nodetail"
      ;;
    h|home|dashboard|"")
      url="${url_base}/secure/Dashboard.jspa"
      ;;
    l|platform)
      url="${url_base}/secure/RapidBoard.jspa?rapidView=${board_planning}&view=planning.nodetail&quickFilter=933"
      ;;
    p|planning)
      url="${url_base}/secure/RapidBoard.jspa?rapidView=${board_planning}&view=planning.nodetail"
      ;;
    *)
      ticket="$(echo "${ticket}" | tr '[:lower:]' '[:upper:]' | sed 's/^\([A-Z][A-Z]*\)\([0-9][0-9]*\)/\1-\2/g')"
      if $(echo "${ticket}" | grep -q '^\d\+$')
      then
        ticket="RA-"${ticket}
      fi
      url="${url_base}/browse/${ticket}"
      ;;
  esac
  if [ -n "${url}" ]
  then
    open "${url}"
  fi
}

func_phpstorm() {
  local proj=
  local file=
  if [ $# -ge 2 ]
  then
    proj="$(func_projnick2full "${1}")"
    file="${WA_ROOT}/${proj}/${2}"
  else
    file="${1}"
  fi
  if [ "${file:0:1}" == "/" ] || [ "${file:0:1}" == "~" ] 
  then
    file="${file/\/srv/${HOME}/Vagrant/wa}"
  else
    file="$(pwd)/${file}"
  fi
  /Applications/PhpStorm.app/Contents/MacOS/phpstorm "${file}"
}

func_projnick2full() {
  local nick="${1}"
  local full=
  case "${nick}" in
    android|api|arch|aviato|backend|hermes|ios|sso|zeus)
      full="wa-${nick}"
      ;;
    be)
      full="wa-backend"
      ;;
    content)
      full="wa-api-content"
      ;;
    doc)
      full="wa-api-documentation"
      ;;
    infra)
      full="wa-infrastructure"
      ;;
    *)
      full="${nick}"
      ;;
  esac
  echo "${full}"
}
