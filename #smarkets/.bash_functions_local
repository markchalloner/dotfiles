# Dig

func_digsm() {
  local host="$1"; shift
  local long="$1"; shift

  local cmd='cat'
  local short=''
  if [ -n $long  ] && grep -viq '\(y\(es\)\?\)\|\(l\(ong\)\?\)' <<< "$long"
  then
    cmd='sort -V'
    short='+short'
  fi

  dig $short "$host.$SM_DOMAIN" | $cmd
}

# Gitlab
FVAR_GITLAB_LABELS="infra Infra Security Tooling"

func_glmr() {
  local labels="${1:-${FVAR_GITLAB_LABELS}}"
  for label in ${labels}; do
    gitlab -o json merge-request list --state=opened --group-id=0 --scope=all --labels=${label}
  done |
    jq -rs 'flatten(2) | unique | sort_by(.created_at) | reverse | .[] | [.author.name, .title, .web_url] | @tsv' |
    column -s $'\t' -t
}

func_glmrcount() {
  local labels="${1:-${FVAR_GITLAB_LABELS}}"
  local text=" MR"
  local count=$(
    for label in ${labels}; do
      gitlab -o json merge-request list --state=opened --group-id=0 --scope=all --labels=${label}
    done |
      jq -rs 'flatten(2) | unique | map(select(.author.username != "mark.challoner")) | length'
  )
  if [ $count -ne 1 ]; then
    text="${text}s"
  fi
  echo "${count}${text}"
}

# Helm
func_helmdelete() {
  local release="$1"; shift
  helm delete --purge "$release"
}

func_helmreset() {
  local release="$1"; shift
  func_helmdelete "$release"
  func_helmupgrade "$release"
}

func_helmupgrade() {
  local release="$1"; shift
  local chart="${1-$release}"; shift
  helm upgrade --install --force --recreate-pods --reset-values --wait "$release" "$chart"
}

# Kubernetes
func_kubeshell() {
  local pod="$1"; shift

  if [ -z "$pod" ]
  then
    echo "Error: Pod must be supplied."
    return 1
  fi
  local columns="$(tput cols)"
  local lines="$(tput lines)"
  local term="xterm"
  kubectl exec -i -t $pod env COLUMNS="$columns" LINES="$lines" TERM="$term" bash
}

# SSH
func_sshsmarkets () {
  local host="$1"; shift
  local index
  if [[ "$1" =~ ^[0-9]+$ ]]
  then
    index="$1"; shift
  else
    index=1
  fi
  local user="$SM_SSH_USER"
  local admin=0
  local hosts
  if [ -z "$host" ]
  then
    echo "Error: Host must be supplied."
    return 1
  fi
  index=$((index-1))
  if [[ "$host" == admin@* ]]
  then
    admin=1
    host="${host//admin@/}"
  fi
  if [[ ! $host =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
  then
    if [ "${host/./}" == "$host" ]
    then
      host="$host.$SM_DOMAIN"
    fi
    hosts=($(dig +short "$host" | sort -V | tr $'\n' ' '))
    if [ "${#hosts[@]}" -gt "1" ]
    then
      echo "Warning: found more that one host at $host (${hosts[@]}). Using host ${hosts[$index]}."
    fi
    host=${hosts[$index]}
  fi;
  if [ $admin -eq 1 ] || grep --color=auto -q 'docker\|ldap' <<< "$host"
  then
    user="$SM_SSH_USER_ADMIN"
  fi
  func_ssh -A "$user"@"$host" $@
}

# Yubikey
func_yubilock() {
  if [ -z "$(lsusb | grep Yubico)" ]
  then
    logger "YubiKey Removed or Changed"
    export XDG_SEAT_PATH="/org/freedesktop/DisplayManager/Seat0" 
    /usr/bin/dm-tool lock
  fi
}
