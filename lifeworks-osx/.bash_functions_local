func_awsassumerole() {
  local role="${1:-test}"
  local token="${2}"
  if [ -z "${token}" ] && func_totpvalid "${role}"
  then
    token="${role}"
    role="test"
  fi
  # MFA
  if [ -z "${AWS_MFA_DEVICE}" ]
  then
    echo "Error: MFA device must be set in \$AWS_MFA_DEVICE"
    return 1
  fi
  if [ -z "${token}" ]
  then
    echo "Error: MFA token must be provided"
    return 1
  fi
  # Role
  case "${role}" in
    "data-live")
      aws_role="AWS_DATA_LIVE_ROLE"
      ;;
    "data-test")
      aws_role="AWS_DATA_TEST_ROLE"
      ;;
    "live")
      aws_role="AWS_LIVE_ROLE"
      ;;
    "mgmt")
      aws_role="AWS_MGMT_ROLE"
      ;;
    "test")
      aws_role="AWS_TEST_ROLE"
      ;;
    *)
      echo "Error: Unknown role \"${role}\""
  esac
  if [ -z "${!aws_role}" ]
  then
    echo "Error: Role must be set in ${aws_role}"
    return 1
  fi
  # Define the variable first so we can capture the command result
  local output
  output="$(aws sts assume-role --role-arn "${!aws_role}" --role-session-name "${role}" --serial-number "${AWS_MFA_DEVICE}" --token-code "${token}")"
  local result=${?}
  AWS_ACCESS_KEY_ID="$(echo "${output}" | sed -n -e '/AccessKeyId/ s/.*".*": "\(.*\)".*/\1/p')"
  AWS_SECRET_ACCESS_KEY="$(echo "${output}" | sed -n -e '/SecretAccessKey/ s/.*".*": "\(.*\)".*/\1/p')"
  AWS_SESSION_TOKEN="$(echo "${output}" | sed -n -e '/SessionToken/ s/.*".*": "\(.*\)".*/\1/p')"
  return ${result}
}

func_awscreatequeuesraw() {
  local name="${1}"
  if [ -z "${name}" ]
  then
    echo "Error: Name must be specified."
  fi
  for i in apn bat bat_detail hilife job pm
  do
    aws sqs create-queue --queue-name vagrant_${i}_$name --attributes MessageRetentionPeriod=36000,VisibilityTimeout=36000
  done
}

func_awscreatequeues() {
  local name="${1}"
  local token="${2}"
  func_awssudo test "${token}" func_awscreatequeuesraw "${name}"
}

func_awsexportenv() {
  func_awsassumerole "${1}" "${2}" || return 1
  export AWS_ACCESS_KEY_ID
  export AWS_SECRET_ACCESS_KEY
  export AWS_SESSION_TOKEN
}

func_awsgetenv() {
  func_awsassumerole "${1}" "${2}" || return 1
  export AWS_ROLE_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
  export AWS_ROLE_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
  export AWS_ROLE_SESSION_TOKEN="${AWS_SESSION_TOKEN}"
  echo "${AWS_ROLE_ACCESS_KEY_ID}"
  echo "${AWS_ROLE_SECRET_ACCESS_KEY}"
  echo "${AWS_ROLE_SESSION_TOKEN}"
}

func_awsipsraw() {
  aws ec2 describe-instances --query 'Reservations[].Instances[?PrivateIpAddress!=null][].{ip:PrivateIpAddress, name:Tags[?Key==`Name`].Value[] | [0]} | sort_by(@, &name) | @[].[ip, name] | map(&join(`" "`, @), @)'  | sed -e 's/^  *"\([0-9.][0-9.]*\) \([^"]*\)",*/\1'$'\t''\2/g' -e '/^[]\[]$/d'
}

func_awsips() {
  local role="${1:-test}"
  local token="${2}"
  if [ -z "${token}" ] && func_totpvalid "${role}"
  then
     token="${role}"
     role="test"
  fi
  local cache_dir="${HOME}/.aws"
  local cache_file="${cache_dir}/ips-${role}"
  if [ -n "${token}" ]
  then
    mkdir -p "${cache_dir}"
    ips=$(func_awssudo "${1}" "${2}" func_awsipsraw)
    if [ $? -eq 0 ]
    then
      echo -e "# Generated at $(date "+%Y-%m-%d %H:%M:%S")\n${ips}" | tee "${cache_file}"
      return 0
    else
      return 1
    fi
  else
    if [ -f "${cache_file}" ]
    then
      cat "${cache_file}"
    else
      echo "Error: IPs have not been cached, rerun with an MFA token"
      return 1
    fi
  fi
}

func_awsip() {
  local role="${1}"
  local search="${2}"
  local index="${3:-1}"
  local token="${4}"
  if [ -z "${role}" ]
  then
    echo "Error: Must provide a role"
    return 1
  fi
  if [ -z "${search}" ]
  then
    echo "Error: Must provide a search term"
    return 1
  fi
  if [ -z "${token}" ] && [ ${#index} -eq 6 ]
  then
    token="${index}"
    index=1
  fi
  local output
  output=$(func_awsips "${role}" "${token}")
  local result="${?}"
  if [ ${result} -eq 0 ]
  then
    local ip=$(echo "${output}" | grep "${search}" | head -n "${index}" | tail -n 1 | cut -f 1)
    if [ -n "${ip}" ]
    then
      echo "${ip}"
      return 0
    else
      echo "Error: IP for ${search} not found"
      return 1
    fi
  else
    echo "${output}"
  fi
  return ${result}
}

func_awsmongocmdline() {
  local env="${1}"
  local db="${2:-"wam"}"
  func_awsmongouser "${env}" || return 1
  local user="${RETVAL}"
  func_awsmongopass "${env}" || return 1
  local pass="${RETVAL}"
  RETVAL="mongo '${db}' --quiet --authenticationDatabase admin -u '${user}' -p '${pass}'"
}

func_awsmongocmd() {
  func_stdin
  local stdin="${RETVAL}"
  local env="${1}"
  # Default to 3
  local instance="${2}"
  # Default to wam
  local db="${3}"
  local query="${4}"
  local cmd

  if [ -z "${env}" ]
  then
    echo "Error: missing environment."
    return 1
  fi

  # Set defaults
  if [ $# -lt 3 ]
  then
    instance="3"
    db="wam"
    query="${2}"
  elif [ $# -lt 4 ]
  then
    db="wam"
    query="${3}"
  fi

  # Use stdin for query if supplied.
  if [ -n "${stdin}" ]
  then
    query="${stdin}"
  fi

  if [ -z "${query}" ]
  then
    echo "Error: no query."
  fi

  func_awsmongocmdline "${env}" "${db}" || return 1
  cmd="${RETVAL}"

  func_awsmongoinstance "${instance}"
  instance="${RETVAL}"

  func_env2termcolor "${env}"
  func_termcolor "${RETVAL}"
  echo "${query}"
  query="rs.slaveOk(); DBQuery.shellBatchSize = 9999; ${query}"
  # Use the first instance as we have built a unique instance name.
  func_awsssh "${env}" "${instance}" 1 "${cmd}" <<< "${query}" | grep -v 'I NETWORK'
}

func_awsmongoinstance() {
  local instance="${1:-3}"
  # Build mongo instance name.
  if grep -qv "mongodb" <<< "${instance}"
  then
    if [ "${instance}" == "1" ] || [ "${instance}" == "2" ] || [ "${instance}" == "3" ] || [ "${instance:0}" == "-" ]
    then
      instance="mongodb${instance}"
    else
      instance="mongodb-${instance}"
    fi
  fi
  RETVAL="${instance}"
}

func_awsmongopass() {
  local env="${1:-test}"
  local pass
  # Role
  case "${env}" in
    "data-live")
      pass="${DB_DATA_LIVE_ADMIN_PASS}"
      ;;
    "data-test")
      pass="${DB_DATA_TEST_ADMIN_PASS}"
      ;;
    "live")
      pass="${DB_LIVE_ADMIN_PASS}"
      ;;
    "test")
      pass="${DB_TEST_ADMIN_PASS}"
      ;;
    *)
      echo "Error: Unknown environment \"${env}\"."
      return 1
  esac
  if [ -z "${user}" ]
  then
    echo "Error: Environment user variable not found."
    return 1
  fi
  RETVAL="${pass}"
}

func_awsmongoshell() {
  local env="${1}"
  local instance="${2:-3}"
  local db="${3:-wam}"

  local cmd
  if [ -z "${env}" ]
  then
    echo "Error: missing environment."
    return 1
  fi

  func_awsmongocmdline "${env}" "${db}" || return 1
  cmd="${RETVAL}"

  func_awsmongoinstance "${instance}"
  instance="${RETVAL}"

  func_env2termcolor "${env}"
  func_termcolor "${RETVAL}"
  func_awsssh "${env}" "${instance}" 1 "${cmd}"
  func_termcolor "default"
}

func_awsmongouser() {
  local env="${1:-test}"
  local user
  # Role
  case "${env}" in
    "data-live")
      user="${DB_DATA_LIVE_ADMIN_USER}"
      ;;
    "data-test")
      user="${DB_DATA_TEST_ADMIN_USER}"
      ;;
    "live")
      user="${DB_LIVE_ADMIN_USER}"
      ;;
    "test")
      user="${DB_TEST_ADMIN_USER}"
      ;;
    *)
      echo "Error: Unknown environment \"${env}\"."
      return 1
  esac
  if [ -z "${user}" ]
  then
    echo "Error: Environment user variable not found."
    return 1
  fi
  RETVAL="${user}"
}

func_awsscp() {
  local env="${1}"
  local role="${2}"
  local id="${3}"
  local token="${4}"
  local from="${5}"
  local to="${6}"
  if [ -z "${from}" ]
  then
    to="${token}"
    from="${id}"
    token=""
    id=""
  elif [ -z "${to}" ]
  then
    to="${from}"
    from="${token}"
    token=""
  fi
  if [ -z "${from}" ]
  then
    echo "Error: missing source."
    return 1
  fi
  if [ -z "${to}" ]
  then
    echo "Error: missing destination."
    return 1
  fi
  local from_remote
  local to_remote
  if [[ X${from} == X:* ]]
  then
    from_remote=1
  else
    from_remote=0
  fi
  if [[ X${to} == X:* ]]
  then
    to_remote=1
  else
    to_remote=0
  fi
  if [ ${from_remote} -eq ${to_remote} ]
  then
    echo "Error: One, but not both, of source and destination must be remote (prepended with a colon)."
    return 1
  fi
  if [ -z "${AWS_SSH_USER}" ]
  then
    echo "Error: User must be defined in \$AWS_SSH_USER"
    return 1
  fi
  local output
  output=$(func_awsip "${env}" "${role}" "${id}" "${token}")
  local result="${?}"
  if [ ${result} -ne 0 ]
  then
    echo "${output}"
    return ${result}
  fi
  local ssh_string="${AWS_SSH_USER}@${output}"
  if [ ${from_remote} -eq 1 ]
  then
    from="${ssh_string}${from}"
  elif [ ${to_remote} -eq 1 ]
  then
    to="${ssh_string}${to}"
  fi
  func_env2termcolor "${env}"
  local term_color="${RETVAL}"
  func_termcolor "${term_color}"
  if ! func_yubipiv
  then
    func_termcolor "default"
    return 1
  fi
  ssh -o PreferredAuthentications=publickey "${ssh_string}" true
  result="${?}"
  if [ ${result} -eq 255 ]
  then
    func_termcolor "${term_color}"
    func_awssshkey "${env}" "${role}" "${id}" "${token}" && func_yubipiv
    result="${?}"
  fi
  if [ ${result} -eq 0 ]
  then
    func_termcolor "${term_color}"
    scp -o PreferredAuthentications=publickey "${from}" "${to}"
  fi
  func_termcolor "default"
}

func_awsssh() {
  func_stdin
  local stdin="${RETVAL}"
  local env="${1}"
  local instance="${2}"
  local id="${3}"
  local token="${4}"
  local cmd="${5}"
  if [ -z "${cmd}" ] && ! func_totpvalid "${token}"
  then
    cmd="${token}"
    token=""
  fi
  if [ -z "${AWS_SSH_USER}" ]
  then
    echo "Error: User must be defined in \$AWS_SSH_USER"
    return 1
  fi
  local output
  output=$(func_awsip "${env}" "${instance}" "${id}" "${token}")
  local result="${?}"
  if [ ${result} -ne 0 ]
  then
    echo "${output}"
    return ${result}
  fi
  func_env2termcolor "${env}"
  local term_color="${RETVAL}"
  func_termcolor "${term_color}"
  if ! func_yubipiv
  then
    func_termcolor "default"
    return 1
  fi
  ssh -o PreferredAuthentications=publickey "${AWS_SSH_USER}"@"${output}" true
  result="${?}"
  if [ ${result} -eq 255 ]
  then
    func_termcolor "${term_color}"
    func_awssshkey "${env}" "${instance}" "${id}" "${token}" && func_yubipiv
    result="${?}"
  fi
  if [ ${result} -eq 0 ]
  then
    func_termcolor "${term_color}"
    if [ -n "${stdin}" ]
    then
      ssh -o PreferredAuthentications=publickey "${AWS_SSH_USER}"@"${output}" "${cmd}" <<< "${stdin}"
    else
      ssh -t -o PreferredAuthentications=publickey "${AWS_SSH_USER}"@"${output}" "${cmd}"
    fi
  fi
  func_termcolor "default"
}

func_awssshkey() {
  local env="${1}"
  local instance="${2}"
  local id="${3}"
  local token="${4}"
  if [ -z "${AWS_SSH_USER}" ]
  then
    echo "Error: User must be defined in \$AWS_SSH_USER"
    return 1
  fi
  local output
  output=$(func_awsip "${env}" "${instance}" "${id}" "${token}")
  local result="${?}"
  if [ ${result} -eq 0 ]
  then
    func_yubinul
    ssh-keygen -R "${output}"
    ssh-copy-id -f -o PubkeyAuthentication=no "${AWS_SSH_USER}"@"${output}"
    return 0
  else
    echo "${output}"
    return ${result}
  fi
}

func_awssudo() {
  (
    func_awsassumerole "${1}" "${2}" || return 1
    export AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY
    export AWS_SESSION_TOKEN
    shift
    shift
    if [ -z "${1}" ]
    then
      echo "Error: No command passed."
    fi
    ${@}
  )
}


func_awsupdbtest() {
  if [ -z "${DB_TEST_ADMIN_USER}" ]
  then
    echo "Error: Test database admin user must be defined in \$DB_TEST_ADMIN_USER"
    return 1
  fi
  if [ -z "${DB_TEST_ADMIN_PASS}" ]
  then
    echo "Error: Test database admin password must be defined in \$DB_TEST_ADMIN_PASS"
    return 1
  fi
  if [ -z "${AWS_S3_DB_TEST_ACCESS_KEY_ID}" ]
  then
    echo "Error: AWS key must be defined in \$AWS_S3_DB_TEST_ACCESS_KEY_ID"
    return 1
  fi
  if [ -z "${AWS_S3_DB_TEST_SECRET_ACCESS_KEY}" ]
  then
    echo "Error: AWS secret must be defined in \$AWS_S3_DB_TEST_SECRET_ACCESS_KEY"
    return 1
  fi
  yubipiv
  local file="wam-test-db-dump.tar.gz"

  func_awsupcmdline wam-testdb-vagrant "${AWS_S3_DB_TEST_ACCESS_KEY_ID}" "${AWS_S3_DB_TEST_SECRET_ACCESS_KEY}" "${file}" "/${file}"
  local upload_cmd="${RETVAL}"

  local output
  output=$(func_awsip "test" "mongodb1")

  func_ssh "${AWS_SSH_USER}"@"${output}" <<-EOF
    set -e
    echo "Removing old dump."
    rm -rf ${file} dump > /dev/null
    echo "Dumping data."
    mongodump -o dump -d wam --authenticationDatabase admin -u ${DB_TEST_ADMIN_USER} -p ${DB_TEST_ADMIN_PASS}
    echo "Compressing."
    tar -czvf ${file} dump/
    echo "Uploading to S3."
    ${upload_cmd}
    echo "Done."
EOF
}

func_awsupcmdline() {
  local bucket="${1}"
  local key="${2}"
  local secret="${3}"
  local file_local="${4}"
  local file_remote="${5}"
  if [ -z "${bucket}" ]
  then
    echo "Error: AWS bucket must be provided"
    return 1
  fi
  if [ -z "${key}" ]
  then
    echo "Error: AWS key must be provided"
    return 1
  fi
  if [ -z "${secret}" ]
  then
    echo "Error: AWS secret must be provided"
    return 1
  fi
  if [ -z "${file_local}" ]
  then
    echo "Error: Local filename must be provided"
    return 1
  fi
  if [ -z "${file_remote}" ]
  then
    echo "Error: Remote filename must be provided"
    return 1
  fi
  local date=$(date +"%a, %d %b %Y %T %z")
  local acl="x-amz-acl:private"
  local content_type="application/x-compressed-tar"
  local string="PUT\n\n${content_type}\n${date}\n${acl}\n/${bucket}${file_remote}"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${secret}" -binary | base64)
  RETVAL='curl -X PUT -T "'${file_local}'" -H "Host: '${bucket}'.s3.amazonaws.com" -H "Date: '${date}'" -H "Content-Type: '${content_type}'" -H "'${acl}'" -H "Authorization: AWS '${key}':'${signature}'" "https://'${bucket}'.s3.amazonaws.com'${file_remote}'"'
}

func_env2termcolor() {
  RETVAL=""
  case "${1}" in
    "data-live")
      RETVAL="255;51;153"
      return 0
      ;;
    "data-test")
      RETVAL="255;204;153"
      return 0
      ;;
    "live")
      RETVAL="255;0;0"
      return 0
      ;;
    "mgmt")
      RETVAL="204;0;255"
      return 0
      ;;
    "test")
      RETVAL="255;153;0"
      return 0
      ;;
  esac
  return 1
}

func_gcliticket2pull() {
  RETVAL=
  local url_base="https://github.com/workivate"
  local prs="${HOME}/.personal/prs.txt"
  local nicks=("infra" "api" "arch" "backend" "sso" "content")
  local ticket="${1}"
  local ticket_num=""
  local nick=""
  local proj=""
  local pr=""
  local url=""
  if [ -z "${ticket}" ]
  then
    return
  fi
  if $(echo "${ticket}" | grep -q "^[[:digit:]]\+$")
  then
    ticket_match="RA *- *${ticket}"
    ticket="RA-${ticket}"
  else
    ticket_match="${ticket/-/ *- *}"
  fi
  if [ -f "${prs}" ]
  then
    url="$(grep "^${ticket}=" "${prs}" | head -n 1 | sed 's/^.*=//g')"
    # Check if this is a pull number
    if [ -z "${url}" ] && [ "${1}" == "${ticket_num}" ]
    then
      url="$(grep "pull/${ticket_num}$" "${HOME}/.personal/prs.txt" | head -n 1 | sed 's/^.*=//g')"
    fi
  fi
  if [ -z "${url}" ]
  then
    for state in "open" "closed"
    do
      for nick in ${nicks[@]}
      do
        proj="$(func_projnick2full "${nick}")"
        if [ -n "${proj}" ]
        then
          echo -n "Searching ${proj} for ${state} ticket ${ticket}... "
          pr="$(cd ${WA_ROOT}/${proj} && hub issue --state="${state}" --include-pulls | grep -i "${ticket_match}" | sed 's/^[^#]*#\([0-9]*\) .*$/\1/g')"
          if [ -n "${pr}" ]
          then
            echo "found!"
            url="${url_base}/${proj}/pull/${pr}"
            func_prcache "${ticket}" "${url}"
            break 2
          else
            echo "not found"
          fi
        fi
      done
    done
  fi
  RETVAL="${url}"
}

func_grumapply() {
  eval "$(func_grumcat)";
}

func_grumcat() {
  cat "${HOME}/grumphp.log"
}

func_grumsave() {
  cat - | sed '1,/^You can fix all errors by running following commands:/d;' | tee "${HOME}/grumphp.log"
}

func_gx() {
  local path="${1}"
  local url_base="https://github.com"
  local url_company="${url_base}/workivate"
  local url=
  local sub=
  local pr=
  local ticket=
  if $(git status > /dev/null 2>&1)
  then
    func_remind "hub browse"
  fi
  case "${path}" in
    "f"|"feed")
      url="${url_base}"
      ;;
    "p"|"pulls")
      author="$(func_dev2gh "${2}")"
      state="$(echo "${3}" | tr '[:upper:]' '[:lower:]')"
      if [ -z "${author}" ]
      then
         author="markchalloner"
         state="${2}"
      fi
      case "${state}" in
        "o"|"open")
          state="+is%3Aopen"
          ;;
        "c"|"closed")
          state="+is%3Aclosed"
          ;;
        *)
          state=""
          ;;
      esac
      url="${url_base}/pulls?q=is%3Apr+author%3A${author}${state}"
      ;;
    "pr"|"pull-request")
      pr="${2}"
      func_gcliticket2pull "${pr}"
      url="${RETVAL}"
      ;;
    [0-9]*)
      url="${url_company}/wa-api/pull/${path}"
      ;;
    "")
      url="${url_company}"
      ;;
    *)
      path="$(func_projnick2full "${path}")"
      shift 
      sub="${@}"
      sub="${sub// //}"
      sub="${sub//branch/tree}"
      url="${url_company}/${path}/${sub}"
      ;;
  esac
  if [ -n "${url}" ]
  then
    open "${url}"
  fi
}

func_hstsclean() {
  local search="${1:-lifeworks}"
  sed -i.bak '/'${search}'/d' ~/Library/Application\ Support/Firefox/Profiles/*.default/SiteSecurityServiceState.txt
}


func_jr() {
  local ticket="${1}"
  local branch=
  local url_base="https://workivate.atlassian.net"
  local url=
  if [ -z "${ticket}" ] && $(git status > /dev/null 2>&1)
  then
    branch="$(git rev-parse --abbrev-ref HEAD)"
    if $(echo "${branch}" | grep -q '^\w\+-\d\+$')
    then
      ticket="${branch}"
    fi
  fi
  case "${ticket}" in
    a|api)
      url="${url_base}/secure/RapidBoard.jspa?projectKey=LT&rapidView=259"
      ;;
    i|in)
      url="${url_base}/secure/RapidBoard.jspa?rapidView=234&view=planning.nodetail"
      ;;
    s|iss)
      url="${url_base}/secure/RapidBoard.jspa?rapidView=241&view=detail"
      ;;
    h|home|dashboard|"")
      url="${url_base}/secure/Dashboard.jspa"
      ;;
    *)
      ticket="$(echo "${ticket}" | tr '[:lower:]' '[:upper:]' | sed 's/^\([A-Z][A-Z]*\)\([0-9][0-9]*\)/\1-\2/g')"
      if $(echo "${ticket}" | grep -q '^\d\+$')
      then
        ticket="RA-"${ticket}
      fi
      url="${url_base}/browse/${ticket}"
      ;;
  esac
  if [ -n "${url}" ]
  then
    open "${url}"
  fi
}

func_phpstorm() {
  local proj=
  local file=
  if [ $# -ge 2 ]
  then
    proj="$(func_projnick2full "${1}")"
    file="${WA_ROOT}/${proj}/${2}"
  else
    file="${1}"
  fi
  if [ "${file:0:1}" == "/" ] || [ "${file:0:1}" == "~" ] 
  then
    file="${file/\/srv/${HOME}/Vagrant/wa}"
  else
    file="$(pwd)/${file}"
  fi
  /Applications/PhpStorm.app/Contents/MacOS/phpstorm "${file}"
}

func_projnick2full() {
  local nick="${1}"
  local full=
  case "${nick}" in
    android|api|arch|aviato|backend|hermes|ios|sso|zeus)
      full="wa-${nick}"
      ;;
    be)
      full="wa-backend"
      ;;
    content)
      full="wa-api-content"
      ;;
    doc)
      full="wa-api-documentation"
      ;;
    infra)
      full="wa-infrastructure"
      ;;
    *)
      full="${nick}"
      ;;
  esac
  echo "${full}"
}

func_up() {
  local path="${1}"
  local url_base="http://67.207.70.48"
  local url=
  local sub=
  case "${path}" in
    "f"|"feed"|"")
      url="${url_base}"
      ;;
    *)
      path="$(func_projnick2full "${path}")"
      shift
      sub="${@}"
      sub="${sub// //}"
      sub="${sub//pr/reviews}"
      url="${url_base}/${path}/${sub}"
      ;;
  esac
  if [ -n "${url}" ]
  then
    open "${url}"
  fi
}

func_vpn() {
  local name="${1}"; shift
  local cmd="tunnel-blick-totp.py"
  local args
  local totp

  if ! type ${cmd} > /dev/null 2>&1
  then
    echo "Error: ${cmd} must be present on the path."
    return 1
  fi

  if [ "${#}" -eq 0 ]
  then
    totp="$(func_yubitotp 'LifeWorks: ' -c)"
    if [ $? -ne 0 ]
    then
      echo 'Error: cannot obtain TOTP, is the Yubikey inserted?'
      return 1
    fi
    args="--otp ${totp}"
  else
    args="${@}"
  fi

  ${cmd} --name "${name}" ${args}
}

# YAML
func_yamldecode() {
  local string
  local key_pri="${HOME}/Vagrant/wa/private-mgmt.pem"
  local key_pub="${HOME}/Vagrant/wa/wa-infrastructure/rs.workangel.com/modules/wa_kms_eyaml/files/public.pem"
  if [ ! -f "${key_pri}" ]
  then
    echo 'Error: private key should be saved to '${key_pri}'.'
    return 1
  fi
  if [ ! -f "${key_pub}" ]
  then
    echo 'Error: public key should be saved to '${key_pub}'.'
    return 1
  fi
  func_stdin
  if [ -n "${RETVAL}" ]
  then
    string="${RETVAL}"
  elif [ -n "${1}" ]
  then
    string="${1}"
  else
    echo "Error: string to decrypt must be passed via stdin or as an argument."
    return 1
  fi
  eyaml decrypt --pkcs7-private-key="${key_pri}" --pkcs7-public-key="${key_pub}" --stdin <<< "${string}"
}

func_yamlencode() {
  local string
  local encrypted
  local decrypted
  local diff
  local key_pub="${HOME}/Vagrant/wa/wa-infrastructure/rs.workangel.com/modules/wa_kms_eyaml/files/public.pem"
  if [ ! -f "${key_pub}" ]
  then
    echo 'Error: public key should be saved to '${key_pub}'.'
    return 1
  fi
  func_stdin
  if [ -n "${RETVAL}" ]
  then
    string="${RETVAL}"
  elif [ -n "${1}" ]
  then
    string="${1}"
  else
    echo "Error: string to encrypt must be passed via stdin or as an argument."
    return 1
  fi
  encrypted="$(eyaml encrypt --pkcs7-public-key="${key_pub}" --output=string --stdin <<< "${string}")"
  decrypted="$(func_yamldecode <<< "${encrypted}")"
  diff="$(diff -B <(echo "${string}") <(echo "${decrypted}"))"
  if [ $? -ne 0 ]
  then
    echo "Error: decrypted string does not match input:"$'\n'"${diff}"
    return 1
  fi
  echo "${encrypted}"
}

